using Microsoft.AspNetCore.Mvc;
using SpeedReading.API.Models;
using SpeedReading.Application.Services;
using SpeedReading.Application.DTOs.Analytics;
using SpeedReading.Domain.Repositories;
using SpeedReading.Domain.Enums;
using System.ComponentModel.DataAnnotations;

namespace SpeedReading.API.Controllers;

/// <summary>
/// Controller for analytics and reporting functionality
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Produces("application/json")]
[ProducesResponseType(typeof(ApiResponse), StatusCodes.Status400BadRequest)]
[ProducesResponseType(typeof(ApiResponse), StatusCodes.Status500InternalServerError)]
public class AnalyticsController : ControllerBase
{
    private readonly ComprehensionAnalyticsService _analyticsService;
    private readonly ComprehensionScoringService _scoringService;
    private readonly IExerciseAttemptRepository _attemptRepository;
    private readonly IExerciseRepository _exerciseRepository;
    private readonly ILogger<AnalyticsController> _logger;

    /// <summary>
    /// Initializes a new instance of the AnalyticsController
    /// </summary>
    public AnalyticsController(
        ComprehensionAnalyticsService analyticsService,
        ComprehensionScoringService scoringService,
        IExerciseAttemptRepository attemptRepository,
        IExerciseRepository exerciseRepository,
        ILogger<AnalyticsController> logger)
    {
        _analyticsService = analyticsService;
        _scoringService = scoringService;
        _attemptRepository = attemptRepository;
        _exerciseRepository = exerciseRepository;
        _logger = logger;
    }

    /// <summary>
    /// Gets comprehensive user performance report
    /// </summary>
    /// <param name="userId">User ID</param>
    /// <param name="periodDays">Analysis period in days (default: 30)</param>
    /// <returns>User comprehension report</returns>
    [HttpGet("user/{userId:guid}/report")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetUserReport(
        [FromRoute] Guid userId,
        [FromQuery, Range(1, 365)] int periodDays = 30)
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-periodDays);

            // Create a simplified user report using repository data
            var userAttempts = await _attemptRepository.GetUserAttemptsAsync(
                userId, null, null, startDate, endDate, false, 1, 100, "StartedAt", "asc");
            
            var report = new
            {
                UserId = userId,
                ReportPeriod = new { StartDate = startDate, EndDate = endDate },
                TotalAttempts = userAttempts.TotalCount,
                CompletedAttempts = userAttempts.Items.Count(a => a.Status == Domain.Enums.AttemptStatus.Completed),
                AverageScore = userAttempts.Items.Where(a => a.ScorePercentage.HasValue).Average(a => a.ScorePercentage ?? 0),
                PassedAttempts = userAttempts.Items.Count(a => a.IsPassed)
            };

            _logger.LogInformation("Generated user report for user {UserId} covering {Days} days", 
                userId, periodDays);

            return Ok(ApiResponse<object>.Ok(report));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating user report for user {UserId}", userId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while generating the user report"));
        }
    }

    /// <summary>
    /// Gets user performance trends over time
    /// </summary>
    /// <param name="userId">User ID</param>
    /// <param name="periodDays">Analysis period in days (default: 90)</param>
    /// <param name="intervalDays">Data point interval in days (default: 7)</param>
    /// <returns>Performance trends</returns>
    [HttpGet("user/{userId:guid}/trends")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetUserTrends(
        [FromRoute] Guid userId,
        [FromQuery, Range(7, 365)] int periodDays = 90,
        [FromQuery, Range(1, 30)] int intervalDays = 7)
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-periodDays);

            var criteria = new AttemptSearchCriteria
            {
                UserId = userId,
                StartedAfter = startDate,
                StartedBefore = endDate,
                Status = AttemptStatus.Completed,
                Take = 100,
                OrderBy = "StartedAt",
                OrderDescending = false
            };
            var attempts = await _attemptRepository.SearchAsync(criteria);

            var trends = attempts.GroupBy(a => a.StartedAt.Date)
                .Select(g => new
                {
                    Date = g.Key,
                    AverageScore = g.Average(a => a.ScorePercentage),
                    AttemptsCount = g.Count()
                })
                .OrderBy(t => t.Date)
                .ToList();

            _logger.LogInformation("Generated performance trends for user {UserId}", userId);

            return Ok(ApiResponse<object>.Ok(trends));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating trends for user {UserId}", userId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while generating performance trends"));
        }
    }

    /// <summary>
    /// Gets user performance comparison with peers
    /// </summary>
    /// <param name="userId">User ID</param>
    /// <param name="educationLevel">Education level for comparison</param>
    /// <param name="periodDays">Analysis period in days (default: 30)</param>
    /// <returns>Performance comparison</returns>
    [HttpGet("user/{userId:guid}/comparison")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetUserComparison(
        [FromRoute] Guid userId,
        [FromQuery] EducationCategory? educationLevel = null,
        [FromQuery, Range(1, 365)] int periodDays = 30)
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-periodDays);

            var userCriteria = new AttemptSearchCriteria
            {
                UserId = userId,
                StartedAfter = startDate,
                StartedBefore = endDate,
                Status = AttemptStatus.Completed,
                Take = 100
            };
            var userAttempts = await _attemptRepository.SearchAsync(userCriteria);

            var comparison = new
            {
                UserId = userId,
                UserAverageScore = userAttempts.Any() ? userAttempts.Average(a => a.ScorePercentage) : 0,
                TotalAttempts = userAttempts.Count,
                CompletedAttempts = userAttempts.Count(a => a.Status == Domain.Enums.AttemptStatus.Completed)
            };

            _logger.LogInformation("Generated performance comparison for user {UserId}", userId);

            return Ok(ApiResponse<object>.Ok(comparison));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating comparison for user {UserId}", userId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while generating performance comparison"));
        }
    }

    /// <summary>
    /// Gets exercise performance analytics
    /// </summary>
    /// <param name="exerciseId">Exercise ID</param>
    /// <param name="periodDays">Analysis period in days (default: 30)</param>
    /// <returns>Exercise analytics</returns>
    [HttpGet("exercise/{exerciseId:guid}")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetExerciseAnalytics(
        [FromRoute] Guid exerciseId,
        [FromQuery, Range(1, 365)] int periodDays = 30)
    {
        try
        {
            var statistics = await _attemptRepository.GetExerciseStatisticsAsync(exerciseId);

            var analytics = new
            {
                ExerciseId = exerciseId,
                TotalAttempts = statistics?.Sum(s => s.TotalAttempts) ?? 0,
                CompletedAttempts = statistics?.Sum(s => s.CompletedAttempts) ?? 0,
                AverageScore = statistics?.Where(s => s.AverageScore.HasValue).Average(s => s.AverageScore ?? 0) ?? 0,
                PassRate = statistics?.Any() == true && statistics.Sum(s => s.TotalAttempts) > 0
                    ? statistics.Sum(s => s.PassedAttempts) / (double)statistics.Sum(s => s.TotalAttempts) * 100
                    : 0
            };

            _logger.LogInformation("Generated analytics for exercise {ExerciseId}", exerciseId);

            return Ok(ApiResponse<object>.Ok(analytics));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating analytics for exercise {ExerciseId}", exerciseId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while generating exercise analytics"));
        }
    }

    /// <summary>
    /// Gets question difficulty analysis
    /// </summary>
    /// <param name="exerciseId">Exercise ID</param>
    /// <param name="periodDays">Analysis period in days (default: 30)</param>
    /// <returns>Question analysis</returns>
    [HttpGet("exercise/{exerciseId:guid}/questions")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetQuestionAnalytics(
        [FromRoute] Guid exerciseId,
        [FromQuery, Range(1, 365)] int periodDays = 30)
    {
        try
        {
            var exercise = await _exerciseRepository.GetByIdWithQuestionsAsync(exerciseId);
            if (exercise == null)
            {
                return NotFound(ApiResponse.Fail("Exercise not found"));
            }

            var questionAnalytics = exercise.Questions.Select(q => new
            {
                QuestionId = q.Id,
                QuestionText = q.Text ?? "",
                QuestionType = q.Type.ToString(),
                Points = q.Points,
                AnswerCount = 0, // Would need proper answer tracking
                CorrectAnswers = 0,
                DifficultyLevel = "Medium" // Would need proper calculation
            }).ToList();

            _logger.LogInformation("Generated question analytics for exercise {ExerciseId}", exerciseId);

            return Ok(ApiResponse<object>.Ok(questionAnalytics));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating question analytics for exercise {ExerciseId}", exerciseId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while generating question analytics"));
        }
    }

    /// <summary>
    /// Gets overall system analytics dashboard
    /// </summary>
    /// <param name="periodDays">Analysis period in days (default: 30)</param>
    /// <returns>System dashboard data</returns>
    [HttpGet("dashboard")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetSystemDashboard(
        [FromQuery, Range(1, 365)] int periodDays = 30)
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-periodDays);

            var dashboard = new
            {
                PeriodDays = periodDays,
                StartDate = startDate,
                EndDate = endDate,
                TotalUsers = 0, // Would need user statistics
                TotalExercises = 0, // Would need exercise count
                TotalAttempts = 0, // Would need attempt count
                SystemStatus = "Operational"
            };

            _logger.LogInformation("Generated system dashboard for {Days} days", periodDays);

            return Ok(ApiResponse<object>.Ok(dashboard));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating system dashboard");
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while generating the dashboard"));
        }
    }

    /// <summary>
    /// Gets reading speed analysis for a user
    /// </summary>
    /// <param name="userId">User ID</param>
    /// <param name="periodDays">Analysis period in days (default: 30)</param>
    /// <returns>Reading speed analysis</returns>
    [HttpGet("user/{userId:guid}/reading-speed")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetReadingSpeedAnalysis(
        [FromRoute] Guid userId,
        [FromQuery, Range(1, 365)] int periodDays = 30)
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-periodDays);

            var speedCriteria = new AttemptSearchCriteria
            {
                UserId = userId,
                StartedAfter = startDate,
                StartedBefore = endDate,
                Status = AttemptStatus.Completed,
                Take = 100
            };
            var attempts = await _attemptRepository.SearchAsync(speedCriteria);

            var speedAnalysis = new
            {
                UserId = userId,
                PeriodDays = periodDays,
                TotalReadingTime = attempts.Sum(a => a.TimeSpent?.TotalMinutes ?? 0),
                AverageReadingSpeed = 250, // Words per minute - would need proper calculation
                ReadingSpeedTrend = "Improving",
                RecommendedSpeed = 300
            };

            _logger.LogInformation("Generated reading speed analysis for user {UserId}", userId);

            return Ok(ApiResponse<object>.Ok(speedAnalysis));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating reading speed analysis for user {UserId}", userId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while analyzing reading speed"));
        }
    }

    /// <summary>
    /// Gets personalized learning recommendations for a user
    /// </summary>
    /// <param name="userId">User ID</param>
    /// <param name="maxRecommendations">Maximum number of recommendations (default: 10)</param>
    /// <returns>Learning recommendations</returns>
    [HttpGet("user/{userId:guid}/recommendations")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetLearningRecommendations(
        [FromRoute] Guid userId,
        [FromQuery, Range(1, 50)] int maxRecommendations = 10)
    {
        try
        {
            var recommendations = new List<object>
            {
                new { Type = "ReadingSpeed", Priority = "High", Description = "Focus on improving reading speed with timed exercises" },
                new { Type = "Comprehension", Priority = "Medium", Description = "Practice with more complex reading materials" },
                new { Type = "Vocabulary", Priority = "Low", Description = "Expand vocabulary through targeted exercises" }
            }.Take(maxRecommendations).ToList();

            _logger.LogInformation("Generated {Count} learning recommendations for user {UserId}",
                recommendations.Count, userId);

            return Ok(ApiResponse<object>.Ok(recommendations));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating recommendations for user {UserId}", userId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while generating recommendations"));
        }
    }

    /// <summary>
    /// Exports user performance data
    /// </summary>
    /// <param name="userId">User ID</param>
    /// <param name="format">Export format (json, csv)</param>
    /// <param name="periodDays">Analysis period in days (default: 90)</param>
    /// <returns>Exported data</returns>
    [HttpGet("user/{userId:guid}/export")]
    [ProducesResponseType(typeof(FileResult), StatusCodes.Status200OK)]
    public async Task<ActionResult> ExportUserData(
        [FromRoute] Guid userId,
        [FromQuery] string format = "json",
        [FromQuery, Range(1, 365)] int periodDays = 90)
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-periodDays);

            // Create simplified report for export
            var userAttempts = await _attemptRepository.GetUserAttemptsAsync(
                userId, null, null, startDate, endDate, false, 1, 100, "StartedAt", "asc");
            
            var report = new
            {
                UserId = userId,
                ReportPeriod = new { StartDate = startDate, EndDate = endDate },
                TotalAttempts = userAttempts.TotalCount,
                CompletedAttempts = userAttempts.Items.Count(a => a.Status == Domain.Enums.AttemptStatus.Completed),
                AverageScore = userAttempts.Items.Where(a => a.ScorePercentage.HasValue).Average(a => a.ScorePercentage ?? 0),
                PassedAttempts = userAttempts.Items.Count(a => a.IsPassed)
            };

            switch (format.ToLower())
            {
                case "csv":
                    var csvContent = ConvertToCsv(report);
                    return File(System.Text.Encoding.UTF8.GetBytes(csvContent), 
                        "text/csv", $"user-{userId}-report-{DateTime.UtcNow:yyyyMMdd}.csv");

                case "json":
                default:
                    var jsonContent = System.Text.Json.JsonSerializer.Serialize(report, 
                        new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
                    return File(System.Text.Encoding.UTF8.GetBytes(jsonContent),
                        "application/json", $"user-{userId}-report-{DateTime.UtcNow:yyyyMMdd}.json");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error exporting data for user {UserId}", userId);
            return StatusCode(500);
        }
    }

    /// <summary>
    /// Gets detailed attempt analysis with comprehension breakdown
    /// </summary>
    /// <param name="attemptId">Attempt ID</param>
    /// <returns>Detailed attempt analysis</returns>
    [HttpGet("attempt/{attemptId:guid}/analysis")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(ApiResponse), StatusCodes.Status404NotFound)]
    public async Task<ActionResult<ApiResponse<object>>> GetAttemptAnalysis(
        [FromRoute] Guid attemptId)
    {
        try
        {
            var attempt = await _attemptRepository.GetByIdAsync(attemptId);
            if (attempt == null)
            {
                return NotFound(ApiResponse.Fail("Exercise attempt not found"));
            }

            // Create simplified analysis
            var analysis = new
            {
                AttemptId = attempt.Id,
                UserId = attempt.UserId,
                ExerciseId = attempt.ExerciseId,
                Status = attempt.Status.ToString(),
                TotalScore = attempt.TotalScore,
                MaxPossibleScore = attempt.MaxPossibleScore,
                ScorePercentage = attempt.ScorePercentage,
                IsPassed = attempt.IsPassed,
                QuestionsAnswered = attempt.QuestionsAnswered,
                TotalQuestions = attempt.TotalQuestions,
                TimeSpent = attempt.TimeSpent?.ToString(@"hh\:mm\:ss") ?? "N/A"
            };

            _logger.LogInformation("Generated detailed analysis for attempt {AttemptId}", attemptId);

            return Ok(ApiResponse<object>.Ok(analysis));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating analysis for attempt {AttemptId}", attemptId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while analyzing the attempt"));
        }
    }

    /// <summary>
    /// Gets learning progress analytics for a user
    /// </summary>
    /// <param name="userId">User ID</param>
    /// <param name="skillArea">Skill area to analyze (optional)</param>
    /// <param name="periodDays">Analysis period in days (default: 30)</param>
    /// <returns>Learning progress data</returns>
    [HttpGet("user/{userId:guid}/progress")]
    [ProducesResponseType(typeof(ApiResponse<object>), StatusCodes.Status200OK)]
    public async Task<ActionResult<ApiResponse<object>>> GetLearningProgress(
        [FromRoute] Guid userId,
        [FromQuery] string? skillArea = null,
        [FromQuery, Range(1, 365)] int periodDays = 30)
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-periodDays);

            var progressCriteria = new AttemptSearchCriteria
            {
                UserId = userId,
                Status = AttemptStatus.Completed,
                StartedAfter = startDate,
                StartedBefore = endDate,
                Take = 100
            };
            var attempts = await _attemptRepository.SearchAsync(progressCriteria);

            var progress = new
            {
                UserId = userId,
                SkillArea = skillArea ?? "All",
                PeriodDays = periodDays,
                TotalAttempts = attempts.Count,
                CompletedAttempts = attempts.Count(a => a.Status == Domain.Enums.AttemptStatus.Completed),
                AverageScore = attempts.Any() ? attempts.Average(a => a.ScorePercentage) : 0,
                ImprovementTrend = "Stable" // Would need proper calculation
            };

            _logger.LogInformation("Generated learning progress for user {UserId} in area {SkillArea}",
                userId, skillArea ?? "all");

            return Ok(ApiResponse<object>.Ok(progress));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating learning progress for user {UserId}", userId);
            return StatusCode(500, ApiResponse<object>.Fail(
                "An error occurred while analyzing learning progress"));
        }
    }

    private string ConvertToCsv(object report)
    {
        // Simple CSV conversion - would need a proper CSV library for production
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Metric,Value");
        
        // Use reflection to get properties dynamically
        foreach (var prop in report.GetType().GetProperties())
        {
            var value = prop.GetValue(report);
            if (value is DateTime dt)
                value = dt.ToString("yyyy-MM-dd");
            else if (value is double d)
                value = d.ToString("F2");
            
            csv.AppendLine($"{prop.Name},{value}");
        }
        
        return csv.ToString();
    }
}