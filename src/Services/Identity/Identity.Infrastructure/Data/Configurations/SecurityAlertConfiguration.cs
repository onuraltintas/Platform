using Identity.Core.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Identity.Infrastructure.Data.Configurations;

public class SecurityAlertConfiguration : IEntityTypeConfiguration<SecurityAlert>
{
    public void Configure(EntityTypeBuilder<SecurityAlert> builder)
    {
        builder.ToTable("SecurityAlerts");

        builder.HasKey(s => s.Id);

        builder.Property(s => s.AlertType)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(s => s.Title)
            .IsRequired()
            .HasMaxLength(200);

        builder.Property(s => s.Description)
            .IsRequired()
            .HasMaxLength(1000);

        builder.Property(s => s.Severity)
            .IsRequired()
            .HasMaxLength(20)
            .HasDefaultValue("Medium");

        builder.Property(s => s.Status)
            .IsRequired()
            .HasMaxLength(20)
            .HasDefaultValue("New");

        builder.Property(s => s.UserId)
            .HasMaxLength(450);

        builder.Property(s => s.DeviceId)
            .HasMaxLength(255);

        builder.Property(s => s.IpAddress)
            .HasMaxLength(45);

        builder.Property(s => s.SessionId)
            .HasMaxLength(128);

        builder.Property(s => s.AlertData)
            .HasColumnType("jsonb")
            .HasDefaultValue("{}");

        builder.Property(s => s.TriggerConditions)
            .HasColumnType("jsonb")
            .HasDefaultValue("{}");

        builder.Property(s => s.RuleId)
            .HasMaxLength(100);

        builder.Property(s => s.RuleName)
            .HasMaxLength(200);

        builder.Property(s => s.CreatedAt)
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        builder.Property(s => s.AcknowledgedBy)
            .HasMaxLength(450);

        builder.Property(s => s.ResolvedBy)
            .HasMaxLength(450);

        builder.Property(s => s.Resolution)
            .HasMaxLength(1000);

        builder.Property(s => s.Notes)
            .HasMaxLength(1000);

        builder.Property(s => s.IsAutoGenerated)
            .HasDefaultValue(true);

        builder.Property(s => s.CorrelationId)
            .HasMaxLength(100);

        builder.Property(s => s.Priority)
            .HasDefaultValue(100);

        builder.Property(s => s.ConfidenceScore)
            .HasColumnType("decimal(5,2)")
            .HasDefaultValue(100.0m);

        // Indexes
        builder.HasIndex(s => s.UserId)
            .HasDatabaseName("IX_SecurityAlerts_UserId");

        builder.HasIndex(s => s.Severity)
            .HasDatabaseName("IX_SecurityAlerts_Severity");

        builder.HasIndex(s => s.Status)
            .HasDatabaseName("IX_SecurityAlerts_Status");

        builder.HasIndex(s => s.CreatedAt)
            .HasDatabaseName("IX_SecurityAlerts_CreatedAt");

        builder.HasIndex(s => s.AlertType)
            .HasDatabaseName("IX_SecurityAlerts_AlertType");

        builder.HasIndex(s => s.GroupId)
            .HasDatabaseName("IX_SecurityAlerts_GroupId");

        builder.HasIndex(s => s.CorrelationId)
            .HasDatabaseName("IX_SecurityAlerts_CorrelationId");

        // Relationships
        builder.HasOne(s => s.User)
            .WithMany()
            .HasForeignKey(s => s.UserId)
            .OnDelete(DeleteBehavior.SetNull);

        builder.HasOne(s => s.Group)
            .WithMany()
            .HasForeignKey(s => s.GroupId)
            .OnDelete(DeleteBehavior.SetNull);

        builder.HasMany(s => s.Actions)
            .WithOne(a => a.SecurityAlert)
            .HasForeignKey(a => a.SecurityAlertId)
            .OnDelete(DeleteBehavior.Cascade);
    }
}

public class SecurityAlertActionConfiguration : IEntityTypeConfiguration<SecurityAlertAction>
{
    public void Configure(EntityTypeBuilder<SecurityAlertAction> builder)
    {
        builder.ToTable("SecurityAlertActions");

        builder.HasKey(a => a.Id);

        builder.Property(a => a.SecurityAlertId)
            .IsRequired();

        builder.Property(a => a.ActionType)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(a => a.PerformedBy)
            .IsRequired()
            .HasMaxLength(450);

        builder.Property(a => a.ActionDetails)
            .HasMaxLength(1000);

        builder.Property(a => a.ActionData)
            .HasColumnType("jsonb")
            .HasDefaultValue("{}");

        builder.Property(a => a.PerformedAt)
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        // Indexes
        builder.HasIndex(a => a.SecurityAlertId)
            .HasDatabaseName("IX_SecurityAlertActions_SecurityAlertId");

        builder.HasIndex(a => a.ActionType)
            .HasDatabaseName("IX_SecurityAlertActions_ActionType");

        builder.HasIndex(a => a.PerformedBy)
            .HasDatabaseName("IX_SecurityAlertActions_PerformedBy");

        builder.HasIndex(a => a.PerformedAt)
            .HasDatabaseName("IX_SecurityAlertActions_PerformedAt");

        // Relationships
        builder.HasOne(a => a.User)
            .WithMany()
            .HasForeignKey(a => a.PerformedBy)
            .OnDelete(DeleteBehavior.Restrict);
    }
}

public class AlertRuleConfiguration : IEntityTypeConfiguration<AlertRule>
{
    public void Configure(EntityTypeBuilder<AlertRule> builder)
    {
        builder.ToTable("AlertRules");

        builder.HasKey(r => r.Id);

        builder.Property(r => r.Name)
            .IsRequired()
            .HasMaxLength(200);

        builder.Property(r => r.Description)
            .HasMaxLength(1000);

        builder.Property(r => r.Category)
            .IsRequired()
            .HasMaxLength(50);

        builder.Property(r => r.Conditions)
            .HasColumnType("jsonb")
            .HasDefaultValue("{}");

        builder.Property(r => r.Actions)
            .HasColumnType("jsonb")
            .HasDefaultValue("{}");

        builder.Property(r => r.Severity)
            .IsRequired()
            .HasMaxLength(20)
            .HasDefaultValue("Medium");

        builder.Property(r => r.IsActive)
            .HasDefaultValue(true);

        builder.Property(r => r.Priority)
            .HasDefaultValue(100);

        builder.Property(r => r.NotificationChannels)
            .HasColumnType("jsonb")
            .HasDefaultValue("[]");

        builder.Property(r => r.CooldownPeriod)
            .HasDefaultValue(TimeSpan.FromMinutes(5));

        builder.Property(r => r.MaxAlertsPerHour)
            .HasDefaultValue(10);

        builder.Property(r => r.CreatedAt)
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        builder.Property(r => r.CreatedBy)
            .HasMaxLength(450);

        builder.Property(r => r.UpdatedBy)
            .HasMaxLength(450);

        // Indexes
        builder.HasIndex(r => r.Name)
            .IsUnique()
            .HasDatabaseName("IX_AlertRules_Name");

        builder.HasIndex(r => r.Category)
            .HasDatabaseName("IX_AlertRules_Category");

        builder.HasIndex(r => r.IsActive)
            .HasDatabaseName("IX_AlertRules_IsActive");

        builder.HasIndex(r => r.GroupId)
            .HasDatabaseName("IX_AlertRules_GroupId");

        // Relationships
        builder.HasOne(r => r.Group)
            .WithMany()
            .HasForeignKey(r => r.GroupId)
            .OnDelete(DeleteBehavior.SetNull);
    }
}